import { Component, inject, HostListener, OnInit, OnDestroy } from '@angular/core';
import { AsyncPipe } from '@angular/common';
import { AudioPlayerService, Track } from '../service/audio-player-service';

@Component({
  selector: 'lib-player',
  imports: [AsyncPipe],
  templateUrl: './player.html',
  styleUrl: './player.scss',
})
export class Player implements OnInit, OnDestroy {
  private readonly player = inject(AudioPlayerService);

  // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º signals –Ω–∞–ø—Ä—è–º—É—é
  track = this.player.track;
  isPlaying = this.player.isPlaying;
  currentTime = this.player.currentTime;
  duration = this.player.duration;
  volume = this.player.volume;
  isShuffle = this.player.isShuffle;
  repeatMode = this.player.repeatMode;
  isLoading = this.player.isLoading;
  error = this.player.error;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º computed signals –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
  hasTrack = this.player.hasTrack;
  canGoNext = this.player.canGoNext;
  canGoPrev = this.player.canGoPrev;

  // –¢—Ä–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Play, –∞ —Ç—Ä–µ–∫ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
  private readonly defaultTrack: Track = {
    url: 'https://musicfun.it-incubator.app/api/samurai-way-soundtrack.mp3',
    title: 'Samurai Way (Default)',
    artist: 'MusicFun',
    cover: '', // –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å URL –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    // duration: –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å ‚Äî –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –∏–∑ metadata
  };

  ngOnInit(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission();
    }
  }

  ngOnDestroy(): void {
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    this.player.destroy();
  }

  togglePlay() {
    if (!this.hasTrack()) {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî —Å—Ç–∞–≤–∏–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      void this.player.setTrack(this.defaultTrack, true);
      return;
    }
    // –ò–Ω–∞—á–µ –æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ play/pause
    void this.player.togglePlayPause();
  }

  // ... existing code ...
  prev() {
    void this.player.prev();
  }

  next() {
    void this.player.next();
  }

  toggleShuffle() {
    this.player.toggleShuffle();
  }

  toggleRepeat() {
    this.player.cycleRepeatMode();
  }

  seek(event: Event) {
    const input = event.target as HTMLInputElement | null;
    if (!input) return;
    this.player.seek(input.valueAsNumber);
  }

  setVolume(event: Event) {
    const input = event.target as HTMLInputElement | null;
    if (!input) return;
    this.player.setVolume(input.valueAsNumber);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  clearError() {
    this.player.clearError();
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private showNotification(title: string, body: string, icon?: string): void {
    if ('Notification' in window && Notification.permission === 'granted') {
      new Notification(title, {
        body,
        icon: icon || '/favicon.ico',
        tag: 'music-player'
      });
    }
  }

  // –•–µ–ª–ø–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  formatTime(sec: number | undefined | null): string {
    if (!sec || Number.isNaN(sec)) return '0:00';
    const minutes = Math.floor(sec / 60);
    const seconds = Math.floor(sec % 60)
      .toString()
      .padStart(2, '0');
    return `${minutes}:${seconds}`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–∞
  getRepeatIcon(): string {
    const mode = this.repeatMode();
    switch (mode) {
      case 'one': return 'üîÇ';
      case 'all': return 'üîÅ';
      default: return 'üîÅ';
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–∞
  getRepeatTitle(): string {
    const mode = this.repeatMode();
    switch (mode) {
      case 'one': return '–ü–æ–≤—Ç–æ—Ä: –æ–¥–∏–Ω —Ç—Ä–µ–∫';
      case 'all': return '–ü–æ–≤—Ç–æ—Ä: –≤—Å–µ —Ç—Ä–µ–∫–∏';
      default: return '–ü–æ–≤—Ç–æ—Ä: –≤—ã–∫–ª—é—á–µ–Ω';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
  @HostListener('window:keydown', ['$event'])
  handleKeydown(event: KeyboardEvent): void {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    if (event.target instanceof HTMLInputElement) {
      return;
    }

    switch (event.code) {
      case 'Space':
        event.preventDefault();
        this.togglePlay();
        break;
      case 'ArrowLeft':
        event.preventDefault();
        this.prev();
        break;
      case 'ArrowRight':
        event.preventDefault();
        this.next();
        break;
      case 'KeyM':
        event.preventDefault();
        this.toggleShuffle();
        break;
      case 'KeyR':
        event.preventDefault();
        this.toggleRepeat();
        break;
      case 'Escape':
        if (this.error()) {
          this.clearError();
        }
        break;
    }
  }
}
